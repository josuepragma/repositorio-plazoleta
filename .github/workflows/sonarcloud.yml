name: SonarCloud Analysis

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Download repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2:
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: adopt

      # Step 3:
      - name: Build and run tests with Gradle
        run: ./gradlew build --stacktrace --info

      # Step 4:
      - name: Run SonarQube analysis
        run: ./gradlew sonarqube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Step 5: Configure AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.IAM_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.IAM_SECRET_KEY }}
          aws-region: us-east-1

      # Step 6: Sign in Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 7: Build and Push Docker image to Amazon ECR
      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: docker-repository-v1
          IMAGE_TAG: small-square-microservice-v7
        run: |
          # Build a docker container and push it to ECR 
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Step 8:
      - name: Google Chat Notification
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: Build
          url: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
          status: ${{ job.status }}
        if: always()

  deploy:
    needs: build
    name: Deploy to Elastic Beanstalk
    runs-on: ubuntu-latest

    steps:
      # Step 1: Download repository
      - name: Checkout code again
        uses: actions/checkout@v2

      # Step 2:
      - name: Create ZIP deployment package
        run: zip -r deploy_package.zip ./

      # Step 3:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.IAM_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.IAM_SECRET_KEY }}
          aws-region: us-east-1

      # Step 4:
      - name: Upload package to S3 bucket
        run: aws s3 cp deploy_package.zip s3://my-awesome-app-deploy-andrey/

      # Step 5:
      - name: Create new ElasticBeanstalk Application Version
        run: |
          aws elasticbeanstalk create-application-version \
          --application-name MyAwesomeApp \
          --source-bundle S3Bucket="my-awesome-app-deploy-andrey",S3Key="deploy_package.zip" \
          --version-label "ver-${{ github.sha }}" \
          --description "commit-sha-${{ github.sha }}"

      # Step 6:
      - name: Deploy new ElasticBeanstalk Application Version
        run: aws elasticbeanstalk update-environment --environment-name Myawesomeapp-env-1 --version-label "ver-${{ github.sha }}"

      # Step 8:
      - name: Google Chat Notification
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: Build
          url: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
          status: ${{ job.status }}
        if: always()


