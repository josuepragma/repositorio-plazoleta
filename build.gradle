plugins {
    id 'org.springframework.boot' version '2.7.12'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'java'
    id 'jacoco'
//    id 'org.sonarqube' version '3.5.0.2730'
    id 'org.sonarqube' version '3.3'
    id 'org.springdoc.openapi-gradle-plugin' version '1.3.4'
}

group = 'com.pragma.smallsquare'
version = '1.0'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.7")
    openApiVersion = "1.6.11"
}

dependencies {
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.mapstruct:mapstruct:1.5.2.Final'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'com.twilio.sdk:twilio:9.6.0'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.2.Final'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//	testImplementation 'org.springframework.security:spring-security-test'

    implementation "org.springdoc:springdoc-openapi-ui:${openApiVersion}"
    implementation "org.springdoc:springdoc-openapi-webflux-ui:${openApiVersion}"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

//jacoco {
//    toolVersion = '0.8.7' // Versión de Jacoco
//    reportsDir = file("$buildDir/reports/jacoco") // Directorio de los informes de Jacoco
//}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    finalizedBy jacocoTestReport
}
jacocoTestReport {
    reports {
        xml.enabled true // Genera informe XML
        html.enabled true // Genera informe HTML
    }
    dependsOn test // Ejecuta la tarea de prueba antes de generar el informe de cobertura
}

sonarqube {
    properties {
        property 'sonar.projectKey', 'josuepragma'
        property 'sonar.projectName', 'repositorio-plazoleta'
        // Otros ajustes de configuración de SonarQube
    }
}